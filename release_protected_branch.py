#!/usr/bin/env python3
"""
Script pour cr√©er une release sur une branche prot√©g√©e.
Ce script g√©n√®re la version, construit les packages, et pr√©pare tout pour une Pull Request.
"""

import subprocess
import sys
import os
from pathlib import Path
import re


def run_command(cmd, description, check=True):
    """Ex√©cute une commande et affiche le r√©sultat."""
    print(f"\n[INFO] {description}")
    print(f"Commande: {cmd}")
    print("-" * 50)
    
    try:
        result = subprocess.run(cmd, shell=True, check=check, capture_output=True, text=True)
        print("[SUCCESS] Succ√®s!")
        if result.stdout:
            print("Sortie:", result.stdout)
        return True, result
    except subprocess.CalledProcessError as e:
        print(f"[ERROR] Erreur: {e}")
        if e.stdout:
            print("Sortie:", e.stdout)
        if e.stderr:
            print("Erreur:", e.stderr)
        return False, e


def check_dependencies():
    """V√©rifie que les d√©pendances n√©cessaires sont install√©es."""
    print("V√âRIFICATION DES D√âPENDANCES")
    print("=" * 50)
    
    # V√©rifier semantic-release
    success, result = run_command("which semantic-release", "V√©rification de semantic-release", check=False)
    if not success or "not found" in result.stderr:
        print("\n‚ùå semantic-release n'est pas install√©!")
        print("\nüì¶ Solutions:")
        print("1. Avec pip:")
        print("   pip install python-semantic-release")
        print("\n2. Avec uv:")
        print("   uv add python-semantic-release")
        print("\n3. Avec conda:")
        print("   conda install -c conda-forge python-semantic-release")
        return False
    
    # V√©rifier uv
    success, result = run_command("which uv", "V√©rification de uv", check=False)
    if not success or "not found" in result.stderr:
        print("\n‚ö†Ô∏è  uv n'est pas install√©, utilisation de pip √† la place")
        return True
    
    print("‚úÖ Toutes les d√©pendances sont disponibles")
    return True


def get_current_version():
    """R√©cup√®re la version actuelle depuis pyproject.toml."""
    try:
        with open("pyproject.toml", "r", encoding="utf-8") as f:
            content = f.read()
        
        # Chercher la ligne version = "X.X.X"
        pattern = r'version = "([^"]*)"'
        match = re.search(pattern, content)
        if match:
            return match.group(1)
        else:
            print("[ERROR] Version non trouv√©e dans pyproject.toml")
            return None
    except Exception as e:
        print(f"[ERROR] Impossible de lire la version: {e}")
        return None


def main():
    """Fonction principale pour cr√©er une release sur branche prot√©g√©e."""
    print("RELEASE POUR BRANCHE PROT√âG√âE")
    print("=" * 50)
    
    # V√©rifier qu'on est dans un repo Git
    if not Path(".git").exists():
        print("[ERROR] Pas dans un repository Git!")
        sys.exit(1)
    
    # V√©rifier les d√©pendances
    if not check_dependencies():
        print("\n‚ùå D√©pendances manquantes. Veuillez les installer avant de continuer.")
        sys.exit(1)
    
    # V√©rifier la branche actuelle
    success, result = run_command("git branch --show-current", "V√©rification de la branche actuelle")
    if not success:
        sys.exit(1)
    
    current_branch = result.stdout.strip()
    print(f"[INFO] Branche actuelle: {current_branch}")
    
    # G√©n√©rer la version avec semantic-release
    print("\n" + "="*50)
    print("G√âN√âRATION DE LA VERSION")
    print("="*50)
    
    success, _ = run_command("semantic-release --verbose version --changelog", "G√©n√©ration de la version")
    if not success:
        print("[ERROR] √âchec de la g√©n√©ration de version")
        sys.exit(1)
    
    # R√©cup√©rer la nouvelle version
    new_version = get_current_version()
    if not new_version:
        print("[ERROR] Impossible de r√©cup√©rer la nouvelle version")
        sys.exit(1)
    
    print(f"[INFO] Nouvelle version g√©n√©r√©e: {new_version}")
    
    # Construire les packages
    print("\n" + "="*50)
    print("CONSTRUCTION DES PACKAGES")
    print("="*50)
    
    # Essayer d'abord uv, puis fallback sur pip + build
    success, _ = run_command("uv build", "Construction avec uv", check=False)
    if not success:
        print("[INFO] uv non disponible, utilisation de pip + build...")
        success, _ = run_command("pip install build", "Installation de build", check=False)
        if not success:
            print("[ERROR] Impossible d'installer build")
            sys.exit(1)
        success, _ = run_command("python -m build", "Construction avec python -m build")
        if not success:
            print("[ERROR] √âchec de la construction des packages")
            sys.exit(1)
    
    # Cr√©er le commit
    print("\n" + "="*50)
    print("CR√âATION DU COMMIT")
    print("="*50)
    
    subprocess.run("git add .", shell=True)
    
    commit_message = f"chore: release version {new_version}"
    success, _ = run_command(f'git commit -m "{commit_message}"', "Cr√©ation du commit", check=False)
    if not success:
        print("[INFO] Pas de changements √† commiter ou commit d√©j√† existant")
    
    # Cr√©er le tag
    print("\n" + "="*50)
    print("CR√âATION DU TAG")
    print("="*50)
    
    tag_name = f"v{new_version}"
    success, _ = run_command(f'git tag "{tag_name}"', "Cr√©ation du tag", check=False)
    if not success:
        print("[INFO] Tag d√©j√† existe ou erreur")
    
    # Instructions finales
    print("\n" + "="*50)
    print("INSTRUCTIONS POUR BRANCHE PROT√âG√âE")
    print("="*50)
    print("‚úÖ Release pr√©par√©e avec succ√®s!")
    print()
    print("üìã Prochaines √©tapes:")
    print("1. Cr√©er une nouvelle branche pour la release:")
    print(f"   git checkout -b release/{new_version}")
    print()
    print("2. Pousser la branche:")
    print(f"   git push origin release/{new_version}")
    print()
    print("3. Pousser les tags:")
    print("   git push origin --tags")
    print()
    print("4. Cr√©er une Pull Request:")
    print(f"   - Titre: 'chore: release version {new_version}'")
    print(f"   - De: release/{new_version}")
    print(f"   - Vers: {current_branch}")
    print()
    print("5. Une fois la PR merg√©e:")
    print("   - Les releases GitHub seront cr√©√©es automatiquement")
    print("   - Le workflow GitHub Actions s'occupera du reste")
    print("="*50)
    
    print(f"\n[SUCCESS] Release {new_version} pr√©par√©e avec succ√®s!")


if __name__ == "__main__":
    main()
