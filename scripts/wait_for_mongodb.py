#!/usr/bin/env python3
"""
Script d'attente pour MongoDB.

Ce script attend que MongoDB soit pr√™t avant de continuer l'ex√©cution.
Il v√©rifie la connexion et l'authentification.
"""

import os
import time
import sys
from pymongo import MongoClient
from pymongo.errors import ConnectionFailure, ServerSelectionTimeoutError

def wait_for_mongodb(max_retries=30, delay=2):
    """
    Attend que MongoDB soit pr√™t et cr√©e la base de donn√©es si n√©cessaire.
    
    Args:
        max_retries: Nombre maximum de tentatives (d√©faut: 30)
        delay: D√©lai entre les tentatives en secondes (d√©faut: 2)
    """
    # Configuration MongoDB depuis les variables d'environnement
    mongo_user = os.getenv("MONGO_USER", "admin")
    mongo_password = os.getenv("MONGO_PASSWORD", "admin")
    mongo_host = os.getenv("MONGO_HOST", "mongodb")
    mongo_port = os.getenv("MONGO_PORT", "27017")
    mongo_db = os.getenv("MONGO_DB", "nyc_taxi_clean")
    
    # Construction de l'URL de connexion
    mongo_url = f"mongodb://{mongo_user}:{mongo_password}@{mongo_host}:{mongo_port}/"
    
    print(f"üîç V√©rification de MongoDB sur {mongo_host}:{mongo_port}...")
    
    for attempt in range(max_retries):
        try:
            # Tentative de connexion
            client = MongoClient(mongo_url, serverSelectionTimeoutMS=2000)
            
            # Test de connexion avec ping
            client.admin.command('ping')
            
            # V√©rifier si la base de donn√©es existe, sinon la cr√©er
            db = client[mongo_db]
            db.command('ping')
            
            # V√©rifier si la collection cleaned_trips existe
            collections = db.list_collection_names()
            if 'cleaned_trips' not in collections:
                print(f"üìù Cr√©ation de la collection 'cleaned_trips' dans la base '{mongo_db}'...")
                db.create_collection('cleaned_trips')
                print(f"‚úÖ Collection 'cleaned_trips' cr√©√©e avec succ√®s")
            else:
                print(f"‚úÖ Collection 'cleaned_trips' existe d√©j√†")
            
            print(f"‚úÖ MongoDB pr√™t ! Base '{mongo_db}' accessible (tentative {attempt + 1}/{max_retries})")
            client.close()
            return True
            
        except (ConnectionFailure, ServerSelectionTimeoutError) as e:
            if attempt < max_retries - 1:
                print(f"‚è≥ Tentative {attempt + 1}/{max_retries} √©chou√©e: {e}")
                print(f"‚è≥ Attente de {delay}s avant la prochaine tentative...")
                time.sleep(delay)
            else:
                print(f"‚ùå Impossible de se connecter √† MongoDB apr√®s {max_retries} tentatives")
                print(f"‚ùå Derni√®re erreur: {e}")
                return False
        except Exception as e:
            print(f"‚ùå Erreur inattendue: {e}")
            return False
    
    return False

if __name__ == "__main__":
    if wait_for_mongodb():
        print("‚úÖ MongoDB est pr√™t !")
        sys.exit(0)
    else:
        print("‚ùå MongoDB n'est pas accessible")
        sys.exit(1)
