services:
  postgres:
    image: postgres:15-alpine
    container_name: nyc-taxi-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-nyc_taxi}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      # Script d'initialisation optionnel
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-nyc_taxi}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    networks:
      - nyc-taxi-network

  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: nyc-taxi-app
    environment:
      # Configuration PostgreSQL
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-nyc_taxi}
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      
      # Configuration de l'application
      APP_ENV: ${APP_ENV:-development}
      API_HOST: ${API_HOST:-0.0.0.0}
      API_PORT: ${API_PORT:-8000}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      
      # Configuration des données
      DATA_DIR: /app/data
      RAW_DATA_DIR: /app/data/raw
    ports:
      - "8000:8000"
    volumes:
      # Montage des données pour l'accès aux fichiers Parquet
      - ./data:/app/data:ro
      # Montage du code source pour le développement (hot reload)
      - ./src:/app/src:ro
    depends_on:
      postgres:
        condition: service_healthy
    command: >
      sh -c "
        python scripts/wait_for_db.py &&
        echo 'Téléchargement des données...' &&
        python src/download_data.py &&
        echo 'Import initial (dédup via import_log)...' &&
        python src/import_to_postgres.py &&
        echo 'Démarrage de l application...' &&
        uvicorn src.main:app --host 0.0.0.0 --port 8000 --reload
      "
    restart: unless-stopped
    networks:
      - nyc-taxi-network

  # Service optionnel pour l'import des données
  data-importer:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: nyc-taxi-importer
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-nyc_taxi}
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      DATA_DIR: /app/data
      RAW_DATA_DIR: /app/data/raw
    volumes:
      - ./data:/app/data:ro
      - ./src:/app/src:ro
    depends_on:
      postgres:
        condition: service_healthy
    command: >
      sh -c "
        python scripts/wait_for_db.py &&
        echo 'Import des données...' &&
        python src/import_to_postgres.py
      "
    profiles:
      - import  # Service activé uniquement avec --profile import
    networks:
      - nyc-taxi-network

volumes:
  postgres_data:
    driver: local

networks:
  nyc-taxi-network:
    driver: bridge
